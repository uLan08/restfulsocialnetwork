You can set up event notifications in two ways. The sections that follow describe each approach in more detail.

* Register an event listener, ignoring events that do not interest you. Spring allows only partial event subscription; you use generics to register the class of events that interest you, and you are notified of that class and all subclasses.
* Register one or more callback closures in @grails-app/conf/Config.groovy@ that take advantage of the plugin's @grails.plugin.springsecurity.rest.RestSecurityEventListener@. The listener does the filtering for you.

h4. AuthenticationEventPublisher

Spring Security Rest publishes events using an [AuthenticationEventPublisher|http://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/authentication/AuthenticationEventPublisher.html] which in turn fire events using the [ApplicationEventPublisher|http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/context/ApplicationEventPublisher.html]. By default no events are fired since the @AuthenticationEventPublisher@ instance registered is a @grails.plugin.springsecurity.rest.authentication.NullRestAuthenticationEventPublisher@. But you can enable event publishing by setting @grails.plugin.springsecurity.useSecurityEventListener = true@ in @grails-app/conf/Config.groovy@.

You can use the @useSecurityEventListener@ setting to temporarily disable and enable the callbacks, or enable them per-environment.

h4. Token Creation

Currently the Spring Security Rest plugin supports a single event in addition to the default spring security events. The event is fired whenever a new token is created. See @grails.plugin.springsecurity.rest.RestTokenCreationEvent@

*Note:* Every time a token is successfully submitted, an @AuthenticationSuccessEvent@ will be fired.
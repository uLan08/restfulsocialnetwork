{note}
Logout is not possible when using [JWT|guide:jwt] tokens (the default strategy), as no state is kept in the server. If
you still want to have logout, you can provide your own implementation by creating a subclass of
[JwtTokenStorageService|http://alvarosanchez.github.io/grails-spring-security-rest/latest/docs/gapi/grails/plugin/springsecurity/rest/token/storage/jwt/JwtTokenStorageService.html]
and overriding the methods @storeToken@ and @removeToken@.

Then, register your implementation in @resources.groovy@ as @tokenStorageService@.

However, a more rational approach would be just to remove the token from the client (eg, browser's local storage) and
let the tokens expire (they will expire anyway, unlike with other storages like Memcached or Redis where they get refreshed
on every access).
{note}

The [logout filter|http://alvarosanchez.github.io/grails-spring-security-rest/latest/docs/gapi/grails/plugin/springsecurity/rest/RestLogoutFilter.html]
exposes an endpoint for deleting tokens. It will read the token from an HTTP header. If found, will delete it from the
storage, sending a 200 response. Otherwise, it will send a 404 response.

You can configure it in @Config.groovy@ using this properties:

{table}
*Config key*                                                    | *Default value*
@grails.plugin.springsecurity.rest.logout.endpointUrl@          | @/api/logout@
@grails.plugin.springsecurity.rest.token.validation.headerName@ | @X-Auth-Token@
{table}
